{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Icon.js","components/Player.js","components/AddPlayerForm.js","App.js","serviceWorker.js","index.js"],"names":["Stats","_ref","players","totalPlayers","length","totalPoints","reduce","sum","player","score","react_default","a","createElement","className","Stopwatch","state","isRunning","elapsedTime","previousTime","handleStopwatch","_this","setState","prevState","Date","now","tick","handleReset","_this2","this","intervalID","setInterval","seconds","Math","floor","onClick","clearInterval","Component","Header","title","components_Stats","components_Stopwatch","defaultProps","Counter","index","changeScore","Icon","isHighestScore","viewBox","d","transform","width","height","Player","_this$props","props","name","id","removePlayer","components_Icon","components_Counter","PureComponent","AddPlayerForm","playerInput","React","createRef","handleSubmit","e","preventDefault","addPlayer","current","value","currentTarget","reset","onSubmit","ref","type","placeholder","App","prevPlayerID","handleAddPlayer","Object","toConsumableArray","concat","handleRemovePlayer","filter","handleScoreChange","delta","getHighestScore","scores","map","highScore","max","apply","console","log","highestScore","components_Header","components_Player","key","toString","components_AddPlayerForm","Boolean","window","location","hostname","match","model","clicks","render","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fdd63a4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Stats = ( {players} ) => {\n\n    let totalPlayers = players.length;\n    let totalPoints = players.reduce( (sum, player) => sum + player.score, 0);\n\n    return(\n        <table className=\"stats\">\n            <tbody>\n                <tr>\n                    <td>Players:</td>\n                    <td>{totalPlayers}</td>\n                </tr>\n                <tr>\n                    <td>Total Points:</td>\n                    <td>{totalPoints}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n\n};\n\nStats.propTypes = {\n    players: PropTypes.arrayOf(PropTypes.object)\n}\n\nexport default Stats;","import React, {Component} from 'react';\n\nclass Stopwatch extends Component {\n\n    state = {\n        isRunning: false,\n        elapsedTime : 0,\n        previousTime: 0\n    };\n\n    handleStopwatch = () => {\n\n        this.setState( prevState => ({isRunning : !this.state.isRunning}));\n\n        if (!this.state.isRunning) {\n            this.setState( {previousTime: Date.now()} );\n        }\n\n    };\n\n    tick = () => {\n        if (this.state.isRunning) {\n            const now = Date.now();\n            this.setState( (prevState) => ({\n                previousTime: now,\n                elapsedTime: prevState.elapsedTime + (now - prevState.previousTime)\n            }) );\n        }\n    }\n\n    handleReset = () => {\n        this.setState( {\n            elapsedTime: 0\n        } );\n    };\n\n    componentDidMount() {\n        this.intervalID = setInterval( () => this.tick(), 100 );\n    }\n\n    render() {\n\n        const seconds = Math.floor( this.state.elapsedTime / 1000 );\n\n        return (\n            <div className=\"stopwatch\">\n                <h2>Stopwatch</h2>\n                <span className=\"stopwatch-time\">{ seconds }</span>\n                <button onClick={this.handleStopwatch}>\n                    { this.state.isRunning ? 'Stop' : 'Start' }\n                </button>\n                <button onClick={this.handleReset}>Reset</button>\n            </div>\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n}\n\nexport default Stopwatch;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Stats from './Stats';\nimport Stopwatch from './Stopwatch';\n\nconst Header = ( {players, title} ) => {\n\n    return (\n        <header>\n            <Stats players={players} />\n            <h1>{title}</h1>\n            <Stopwatch />\n        </header>\n    );\n}\n\nHeader.propTypes = {\n    players: PropTypes.arrayOf(PropTypes.shape({\n        score: PropTypes.number\n    })),\n    title: PropTypes.string\n};\n\nHeader.defaultProps = {\n    title: 'Scoreboard'\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Counter = ( {index, score, changeScore} ) => {\n\n        return (\n            <div className=\"counter\">\n                <button\n                className=\"counter-action decrement\" onClick={ () => {\n                    changeScore(index, -1)}\n                    \n                 } > - </button>\n                <span className=\"counter-score\">{ score }</span>\n                <button className=\"counter-action increment\" onClick={ () => changeScore(index, 1) } > + </button>\n            </div>\n        );\n};\n\nCounter.propTypes = {\n    index: PropTypes.number,\n    score: PropTypes.number,\n    changeScore: PropTypes.func\n};\n\nexport default Counter;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Icon = ({isHighestScore}) => {\n    return(\n        <svg viewBox=\"0 0 44 35\" className={isHighestScore ? \"is-high-score\" : null}>\n            <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\n            <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\n        </svg>\n    );\n}\n\nIcon.propTypes = {\n    isHighestScore: PropTypes.bool\n};\n\nexport default Icon;","import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Counter from './Counter';\nimport Icon from './Icon'\n\nclass Player extends PureComponent {\n\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        id: PropTypes.number,\n        score: PropTypes.number.isRequired,\n        isHighestScore: PropTypes.bool.isRequired,\n        changeScore: PropTypes.func,\n        removePlayer: PropTypes.func,\n        index: PropTypes.number\n    };\n\n    render () {\n\n        const {\n            name,\n            id,\n            score,\n            isHighestScore,\n            changeScore,\n            removePlayer,\n            index\n        } = this.props;\n\n        return(\n            <div className=\"player\">\n            <span className=\"player-name\">\n                <Icon isHighestScore={isHighestScore} />\n                <button className=\"remove-player\" onClick={ () => removePlayer(id) }>✖</button>\n                {name}\n            </span>\n            <Counter\n                score={score}\n                changeScore={changeScore}\n                index={index}\n            />\n            </div>\n        );\n    }\n\n}\n\nexport default Player;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddPlayerForm extends Component {\n\n    static propTypes = {\n        addPlayer: PropTypes.func\n    }\n\n    playerInput = React.createRef();\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addPlayer(this.playerInput.current.value);\n        e.currentTarget.reset();\n    };\n\n    render() {\n\n        return(\n            <form onSubmit={this.handleSubmit}>\n\n                <input\n                    ref={this.playerInput}\n                    type=\"text\"\n                    placeholder=\"Enter a player's name\"\n                />\n\n                <input \n                    type=\"submit\"\n                    value=\"Add Player\"\n                />\n\n            </form>\n        );\n    }\n\n}\n\nexport default AddPlayerForm;","import React, {Component} from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Player from './components/Player';\nimport AddPlayerForm from './components/AddPlayerForm';\n\nclass App extends Component {\n\n    state =  {\n        players: [\n            {\n                name: \"Christin\",\n                score: 0,\n                id: 1\n            },\n            {\n                name: \"Katrina\",\n                score: 0,\n                id: 2\n            },\n            {\n                name: \"Josh\",\n                score: 0,\n                id: 3\n            },\n            {\n                name: \"Jake\",\n                score: 0,\n                id: 4\n            }\n        ]\n    };\n\n    prevPlayerID = 4;\n\n    handleAddPlayer = (name) => {\n        this.setState( prevState => ({\n            players: [\n                ...prevState.players,\n                {\n                    name,\n                    score: 0,\n                    id: this.prevPlayerID += 1\n                }\n            ]\n        }));\n    };\n\n    handleRemovePlayer = (id) => {\n        this.setState(prevState => {\n            return {\n                players: prevState.players.filter( player => player.id !== id )\n            }\n        });\n    }\n\n    handleScoreChange = (index, delta) => {\n        this.setState( prevState => {\n            return {\n                score: prevState.players[index].score += delta\n            }\n        } );\n    }\n\n    getHighestScore = () => {\n        const scores = this.state.players.map(player => player.score);\n        const highScore = Math.max(...scores);\n        console.log(highScore);\n        if (highScore) {\n            return highScore;\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n\n        const highestScore = this.getHighestScore();\n\n        return (\n            <div className=\"scoreboard\">\n                <Header title=\"Scoreboard\" players={this.state.players} />\n                {/* Players list */}\n\n                {this.state.players.map( (player, index) =>\n                    <Player\n                        name={player.name}\n                        score={player.score}\n                        id={player.id}\n                        isHighestScore={player.score===highestScore}\n                        index={index}\n                        key={player.id.toString()}\n                        removePlayer={this.handleRemovePlayer}\n                        changeScore={this.handleScoreChange}\n                    />\n                )}\n                \n                <AddPlayerForm\n                    addPlayer={this.handleAddPlayer}\n                />\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet model = {clicks: 0};\n\nfunction render () {\n    ReactDOM.render(\n        <App \n            clicks={model.clicks}\n            onClick={ () => {model.clicks += 1; render();} } />, \n        document.getElementById('root')\n    );\n}\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}